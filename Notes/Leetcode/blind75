___________________________________ARRAY_______________________________________________
_______________________________________________________________________________________
Easy | Two Sum----------------------------------------------------------------------------
approach 1: Brute Force--------------

Description:    Loop through each element x and find if there is another value
                that equals to 'target-x'

class Solution {
    public int[] twoSum(int[] nums, int target) {
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                if (nums[j] == target - nums[i]) {
                    return new int[] { i, j };
                }
            }
        }
        // In case there is no solution, we'll just return null
        return null;
    }
}
TIME: O(n^2):   For each element, we try to find its complement by looping through the rest
                of the array which takes O(n) time. Therefore, the TC is O(n^2).
SPACE: O(1):    The space required does not depend on the size of the input array,
                so only constant space is used.

approach 2: One-pass Hash Table--------------

Description:    It turns out we can do it in one-pass. While we are iterating and
                inserting elements into the hash table, we also look back to check if
                current element's complement already exists in the hash table. If it
                exists, we have found a solution and return the indices immediately.

class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            if (map.containsKey(complement)) {
                return new int[] { map.get(complement), i };
            }
            map.put(nums[i], i);
        }
        // In case there is no solution, we'll just return null
        return null;
    }
}
TIME: O(n): We traverse the list containing n elements only once. Each loopup in the
            table costs only O(1) time.
SPACE: O(n):    The extra space required depends on the number of items stored in the hash
                table, which stores at most n elements.

Easy | Best Time to Buy and Sell Stock----------------------------------------------------------------------------
approach 1: Iterative--------------

Easy | Contains Duplicate----------------------------------------------------------------------------
approach 1: Iterative--------------

Easy | Product of Array Except Self----------------------------------------------------------------------------
approach 1: Iterative--------------

Easy | Maximum Subarray----------------------------------------------------------------------------
approach 1: Iterative--------------

Medium | Maximum Product Subarray----------------------------------------------------------------------------
approach 1: Iterative--------------

Medium | Find Minimum in Rotated Sorted Array----------------------------------------------------------------------------
approach 1: Iterative--------------

Medium | Search in Rotated Sorted Array----------------------------------------------------------------------------
approach 1: Iterative--------------

Medium | 3Sum----------------------------------------------------------------------------
approach 1: Iterative--------------

Medium | Container With Most Water----------------------------------------------------------------------------
approach 1: Iterative--------------


___________________________________BINARY______________________________________________
_______________________________________________________________________________________

sol1 - iterative--------------

_____________________________DYNAMIC PROGRAMMING_______________________________________
_______________________________________________________________________________________

sol1 - iterative--------------

___________________________________GRAPH_______________________________________________
_______________________________________________________________________________________

sol1 - iterative--------------

__________________________________INTERVAL_____________________________________________
_______________________________________________________________________________________

sol1 - iterative--------------

_________________________________LINKED LIST___________________________________________
_______________________________________________________________________________________

sol1 - iterative--------------

___________________________________MATRIX______________________________________________
_______________________________________________________________________________________

sol1 - iterative--------------

___________________________________STRING______________________________________________
_______________________________________________________________________________________

sol1 - iterative--------------
___________________________________TREE________________________________________________
_______________________________________________________________________________________

sol1 - iterative--------------

___________________________________HEAP________________________________________________
_______________________________________________________________________________________

sol1 - iterative--------------





