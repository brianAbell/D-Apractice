___________________________________ARRAY_______________________________________________
_______________________________________________________________________________________
Easy | 1. Two Sum----------------------------------------------------------------------------
approach 1: Brute Force--------------
Description:    Loop through each element x and find if there is another value
                that equals to 'target-x'

class Solution {
    public int[] twoSum(int[] nums, int target) {
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                if (nums[j] == target - nums[i]) {
                    return new int[] { i, j };
                }
            }
        }
        // In case there is no solution, we'll just return null
        return null;
    }
}
TIME: O(n^2):   For each element, we try to find its complement by looping through the rest
                of the array which takes O(n) time. Therefore, the TC is O(n^2).
SPACE: O(1):    The space required does not depend on the size of the input array,
                so only constant space is used.

approach 2: One-pass(used once) Hash Table--------------
Description:    It turns out we can do it in one-pass. While we are iterating and
                inserting elements into the hash table, we also look back to check if
                current element's complement already exists in the hash table. If it
                exists, we have found a solution and return the indices immediately.

class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            if (map.containsKey(complement)) {
                return new int[] { map.get(complement), i };
            }
            map.put(nums[i], i);
        }
        // In case there is no solution, we'll just return null
        return null;
    }
}
TIME: O(n): We traverse the list containing n elements only once. Each loopup in the
            table costs only O(1) time.
SPACE: O(n):    The extra space required depends on the number of items stored in the hash
                table, which stores at most n elements.

Easy | 121. Best Time to Buy and Sell Stock----------------------------------------------------------------------------
approach 1: Brute force--------------
Description:    We need to find out the maximum difference (which will be the
                maximum profit) between two numbers in the given array. Also,
                the second number (selling price) must be larger than the first
                one (buying price).

class Solution {
    public int maxProfit(int[] prices) {
       //get track of curr max profit
        int currmax = 0;

        // 1  3  4  2  8
        // i     j
        //profit -> 4 - 1 = 3

        //iterate through with pointer 1 (buy)
        for(int i = 0; i < prices.length - 1; i++) {
            //iterate through with pointer 2 (sell)
            for(int j = i + 1; j < prices.length; j++) {
                //the calculated profit
                int profit = prices[j] - prices[i];
                //if profit is bigger than saved max, replace max
                if (profit > currmax) {
                    currmax = profit;
                }
            }
        }
        //finally return the max
        return currmax;
    }
}
TIME: O(n^2): Loop runs (n(2-1))/2 times.
SPACE: O(1): Only two variables - 'maxprofit' and 'profit' are used.

approach 2: One Pass--------------
Description:    For every element, we are calculating the difference
                between that element and the minimum of all the values
                before that element and we are updating the maximum profit
                if the difference thus found is greater than the current
                maximum profit.

//1  2  6
//minprice=1
//maxprofit=5
//return 5
class Solution {
    public int maxProfit(int[] prices) {
        //used to store min found price and max profit
        int minprice = Integer.MAX_VALUE;
        int maxprofit = 0;

        //iterate through array
        for(int i = 0; i < prices.length; i++) {
            //check if the current price is less than saved min price
            if (prices[i] < minprice)
                minprice = prices[i];

            //check if the difference between current price and minprice
            // is larger than maxprofit
            else if (prices[i] - minprice > maxprofit)
                maxprofit = prices[i] - minprice;
        }
        //return the final maxprofit
        return maxprofit;
    }
}
TIME: O(n): Only a single pass needed.
SPACE: O(1): Only two variables are used.
Easy | 217. Contains Duplicate------------------------------------------------------------
approach 1: Naive Linear Search--------------
public boolean containsDuplicate(int[] nums) {
    for (int i = 0; i < nums.length; ++i) {
        for (int j = 0; j < i; ++j) {
            if (nums[j] == nums[i]) return true;
        }
    }
    return false;
}
// Time Limit Exceeded

approach 2: Sorting--------------
public boolean containsDuplicate(int[] nums) {
    Arrays.sort(nums);
    for (int i = 0; i < nums.length - 1; ++i) {
        if (nums[i] == nums[i + 1]) return true;
    }
    return false;
}
TIME: O(nlogn): sort takes nlogn time
SPACE: O(1): no significant space used

approach 3: Hash Table--------------
public boolean containsDuplicate(int[] nums) {
    Set<Integer> set = new HashSet<>(nums.length);
    for (int x: nums) {
        if (set.contains(x)) return true;
        set.add(x);
    }
    return false;
}
TIME: O(n): search() and insert() used n times w ea operation taking constant time
SPACE: O(n): hash table created w its contained elements
Medium | Product of Array Except Self----------------------------------------------------------------------------
approach 1: Left and Right product lists--------------
class Solution {
    public int[] productExceptSelf(int[] nums) {

        // The length of the input array
        int length = nums.length;

        // The left and right arrays as described in the algorithm
        int[] L = new int[length];
        int[] R = new int[length];

        // Final answer array to be returned
        int[] answer = new int[length];

        // L[i] contains the product of all the elements to the left
        // Note: for the element at index '0', there are no elements to the left,
        // so L[0] would be 1
        L[0] = 1;
        for (int i = 1; i < length; i++) {

            // L[i - 1] already contains the product of elements to the left of 'i - 1'
            // Simply multiplying it with nums[i - 1] would give the product of all
            // elements to the left of index 'i'
            L[i] = nums[i - 1] * L[i - 1];
        }

        // R[i] contains the product of all the elements to the right
        // Note: for the element at index 'length - 1', there are no elements to the right,
        // so the R[length - 1] would be 1
        R[length - 1] = 1;
        for (int i = length - 2; i >= 0; i--) {

            // R[i + 1] already contains the product of elements to the right of 'i + 1'
            // Simply multiplying it with nums[i + 1] would give the product of all
            // elements to the right of index 'i'
            R[i] = nums[i + 1] * R[i + 1];
        }

        // Constructing the answer array
        for (int i = 0; i < length; i++) {
            // For the first element, R[i] would be product except self
            // For the last element of the array, product except self would be L[i]
            // Else, multiple product of all elements to the left and to the right
            answer[i] = L[i] * R[i];
        }

        return answer;
    }
}
TIME: O(n):     n represents number of elements in array. One iteration to construct array L,
                one to construct array R and one to construct 'answer' array using L and R.
SPACE: O(n):    used up by the two intermediate arrays that we constructed to keep track of
                product of elements to the left and right.

approach 1: O(1) space approach--------------
Description:    Although the above solution is good enough to solve the problem since we
                are not using division anymore, there's a follow-up component as well
                which asks us to solve this using constant space. Understandably so,
                the output array does not count towards the space complexity.
                This appro. is essentially an extension of the appro. above.
                Basically, we will be using the output array as one of L or R and we
                will be constructing the other one on the fly. Let's look at the
                algorithm based on this idea.

Algorithm:  TODO

class Solution {
    public int[] productExceptSelf(int[] nums) {

        // The length of the input array
        int length = nums.length;

        // Final answer array to be returned
        int[] answer = new int[length];

        // answer[i] contains the product of all the elements to the left
        // Note: for the element at index '0', there are no elements to the left,
        // so the answer[0] would be 1
        answer[0] = 1;
        for (int i = 1; i < length; i++) {

            // answer[i - 1] already contains the product of elements to the left of 'i - 1'
            // Simply multiplying it with nums[i - 1] would give the product of all
            // elements to the left of index 'i'
            answer[i] = nums[i - 1] * answer[i - 1];
        }

        // R contains the product of all the elements to the right
        // Note: for the element at index 'length - 1', there are no elements to the right,
        // so the R would be 1
        int R = 1;
        for (int i = length - 1; i >= 0; i--) {

            // For the index 'i', R would contain the
            // product of all elements to the right. We update R accordingly
            answer[i] = answer[i] * R;
            R *= nums[i];
        }

        return answer;
    }
}
TIME: O(n):     Where n represents the number of elements in input array. We use
                one iteration to construct the array 'L', one to update 'answer'.
SPACE: O(1):    since we don't use any additional array for our computations. The problem
                statement mentions that using the 'answer' array doesn't add to the space complexity.

Easy | Maximum Subarray----------------------------------------------------------------------------
approach 1: Iterative--------------

Medium | Maximum Product Subarray----------------------------------------------------------------------------
approach 1: Iterative--------------

Medium | Find Minimum in Rotated Sorted Array----------------------------------------------------------------------------
approach 1: Iterative--------------

Medium | Search in Rotated Sorted Array----------------------------------------------------------------------------
approach 1: Iterative--------------

Medium | 3Sum----------------------------------------------------------------------------
approach 1: Iterative--------------

Medium | Container With Most Water----------------------------------------------------------------------------
approach 1: Iterative--------------


___________________________________BINARY______________________________________________
_______________________________________________________________________________________

sol1 - iterative--------------

_____________________________DYNAMIC PROGRAMMING_______________________________________
_______________________________________________________________________________________

sol1 - iterative--------------

___________________________________GRAPH_______________________________________________
_______________________________________________________________________________________

sol1 - iterative--------------

__________________________________INTERVAL_____________________________________________
_______________________________________________________________________________________

sol1 - iterative--------------

_________________________________LINKED LIST___________________________________________
_______________________________________________________________________________________

sol1 - iterative--------------

___________________________________MATRIX______________________________________________
_______________________________________________________________________________________

sol1 - iterative--------------

___________________________________STRING______________________________________________
_______________________________________________________________________________________

sol1 - iterative--------------
___________________________________TREE________________________________________________
_______________________________________________________________________________________

sol1 - iterative--------------

___________________________________HEAP________________________________________________
_______________________________________________________________________________________
Medium | 347. Top K Frequent Elements-----------------------------------------------------
approach 1: Heap--------------
Description:    TODO

Algorithm:  TODO

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        // O(1) time
        if (k == nums.length) {
            return nums;
        }

        // 1. build hash map : character and how often it appears
        // O(N) time
        Map<Integer, Integer> count = new HashMap();
        for (int n: nums) {
          count.put(n, count.getOrDefault(n, 0) + 1);
        }

        // init heap 'the less frequent element first'
        Queue<Integer> heap = new PriorityQueue<>(
            (n1, n2) -> count.get(n1) - count.get(n2));

        // 2. keep k top frequent elements in the heap
        // O(N log k) < O(N log N) time
        for (int n: count.keySet()) {
          heap.add(n);
          if (heap.size() > k) heap.poll();
        }

        // 3. build an output array
        // O(k log k) time
        int[] top = new int[k];
        for(int i = k - 1; i >= 0; --i) {
            top[i] = heap.poll();
        }
        return top;
    }
}
TIME: O(nlogk):     if k < n and O(n) in the case of n=k. That ensures time complexity
                    to be better than O(nlogn).
SPACE: O(n + k):    to store the hash map with not more than n elements and a heap with
                    k elements.



Hard | 23. Merge k Sorted Lists-----------------------------------------------------------
approach 1: Iterative--------------


Hard | 295. Find Median from Data Stream--------------------------------------------------
approach 1: Iterative--------------





