___________________________________APRIL_______________________________________________
_______________________________________________________________________________________

Medium | 1721. Swapping Nodes in a Linked List--------------------------------------------
approach 1: Three Pass Approach--------------
Description: As explained above, we must implement the algorithm using 3 separate passes.

             Pass 1: Find the length of the Linked List by traversing each node in the
             list from head node to last node and increment the counter by 1. Let the
             counter used to find length be listLength.

             Pass 2: Traverse until the kth node from the head node and set the frontNode.

             Pass 3: Traverse until the listLength - k node from the head node and set the
              endNode.

                    ->  Swap the values of frontNode and endNode using temporary variable
                        temp.

                    ->  Return the head node.

class Solution {
    public ListNode swapNodes(ListNode head, int k) {
        int listLength = 0;
        ListNode currentNode = head;
        // find the length of linked list
        while (currentNode != null) {
            listLength++;
            currentNode = currentNode.next;
        }
        // set the front node at kth node
        ListNode frontNode = head;
        for (int i = 1; i < k; i++) {
            frontNode = frontNode.next;
        }
        //set the end node at (listLength - k)th node
        ListNode endNode = head;
        for (int i = 1; i <= listLength - k; i++) {
            endNode = endNode.next;
        }
        // swap the values of front node and end node
        int temp = frontNode.val;
        frontNode.val = endNode.val;
        endNode.val = temp;
        return head;
    }
}
TIME: O(n): Three iterations over linked list. Refer to page for specifics.
SPACE: O(1): Using constant extra space for list node pointers.

Medium | 11. Container With Most Water----------------------------------------------------
Overview:   We have to maximize the Area that can be formed between the vertical lines
            using the shorter line as length and the distance between the lines as the
            width of the rectangle forming the area.

approach 1: Brute Force--------------
public class Solution {
    public int maxArea(int[] height) {
        int maxarea = 0;
        //first pointer iterate through array
        for (int i = 0; i < height.length; i++)
            //second pointer iterate through array
            for (int j = i + 1; j < height.length; j++)
                //calculate max area/determine if curr max is bigger than other case
                maxarea = Math.max(maxarea, Math.min(height[i], height[j]) * (j - i));
        return maxarea;
    }
}
TIME: O(n^2): Nested for loop, two iterations.
SPACE: O(1): Constant time used.


approach 2: Two Pointer--------------
public class Solution {
    public int maxArea(int[] height) {
        //max area variable, left & right pointers
        int maxarea = 0, l = 0, r = height.length - 1;
        //while 2 pointers have not crossed
        while (l < r) {
            //standard max area calculation
            maxarea = Math.max(maxarea, Math.min(height[l], height[r]) * (r - l));
            //conditions that move smaller height inwards
            if (height[l] < height[r])
                l++;
            else
                r--;
        }
        return maxarea;
    }
}
TIME: O(n): Single pass.
SPACE: O(1): Constant space used.

Easy | 1046. Last Stone Weight------------------------------------------------------
approach 1: Array-Based Simulation--------------

Intuition:  Conceptually, the simplest way we could solve this problem is to repeatedly
            search for the 2 largest stones in the array, delete them, and then if they
            are not the same size, add the new stone size back in. We can repeat this
            process until there is only one stone left.

Algorithm:  Because the array is not sorted, there is no need to preserve the original
            order. Removals should be done by swapping with the last value, not by
            shuffling all values along.

class Solution {

    private int removeLargest(List<Integer> stones) {
        int indexOfLargest = stones.indexOf(Collections.max(stones));
        int result = stones.get(indexOfLargest);
        stones.set(indexOfLargest, stones.get(stones.size() - 1));
        stones.remove(stones.size() - 1);
        return result;
    }

    public int lastStoneWeight(int[] stones) {
        List<Integer> stoneList = new ArrayList<>();
        //loop through and add all stones to list
        for (int weight : stones) {
            stoneList.add(weight);
        }

        //loop through list while more than 1 stone
        while (stoneList.size() > 1) {
            //get the two largest stones
            int stone1 = removeLargest(stoneList);
            int stone2 = removeLargest(stoneList);
            //compare them, if stone1 not the same, we update stone1s weight
            if (stone1 != stone2) {
                stoneList.add(stone1 - stone2);
            }
        }

        //return if list not empty, remove 0 index, else return 0
        return !stoneList.isEmpty() ? stoneList.remove(0) : 0;
    }
}
TIME: O(n^2):
SPACE: O(n):


approach 2: Heap-Based Simulation--------------

Intuition:  TODO

Algorithm:  TODO

class Solution {

    public int lastStoneWeight(int[] stones) {

        // Insert all the stones into a Max-Heap.
        PriorityQueue<Integer> heap = new PriorityQueue<>(Comparator.reverseOrder());
        for (int stone: stones) {
            heap.add(stone);
        }

        // While there is more than one stone left, we need to remove the two largest
        // and smash them together. If there is a resulting stone, we need to put into
        // the heap.
        while (heap.size() > 1) {
            int stone1 = heap.remove();
            int stone2 = heap.remove();
            if (stone1 != stone2) {
                heap.add(stone1 - stone2);
            }
        }

        // Check whether or not there is a stone left to return.
        return heap.isEmpty() ? 0 : heap.remove();
    }
}
TIME: O(nlogn): Converting array into heap takes o(n) time, etc TODO
SPACE: O(n): priorityQueue creation takes o(n) space.

Easy | 682. Baseball Game-----------------------------------------------------------------
approach 1: Stack--------------
class Solution {
    public int calPoints(String[] ops) {
        int sum = 0;
        LinkedList<Integer> list = new LinkedList<>();
        for (String op : ops) {
            if (op.equals("C")) {
                sum -= list.removeLast();
            }
            else if (op.equals("D")) {
                list.add(list.peekLast() * 2);
                sum += list.peekLast();
            }
            else if (op.equals("+")) {
                list.add(list.peekLast() + list.get(list.size() - 2));
                sum += list.peekLast();
            }
            else {
                list.add(Integer.parseInt(op));
                sum += list.peekLast();
            }
        }
        return sum;
    }
}