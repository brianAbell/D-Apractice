$$BLIND 75$$

________________________________ARRAYS________________________________
______________________________________________________________________

--------------1. Two Sum (Easy)--------------

sol1 - Brute Force 2 pointer solution--------------
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] ans = new int[2];
        for(int i = 0; i < nums.length; i++) {
            int curr1 = nums[i];
            for(int j = i+1; j < nums.length; j++) {
                int curr2 = nums[j];
                if(curr1 + curr2 == target) {

                    ans[0] = i;
                    ans[1] = j;
                    return ans;
                }
            }
        }
        return ans;
    }
}
TIME: TODO
SPACE: TODO

TODO sol2 - hashmap--------------
TIME: TODO
SPACE: TODO

--------------121. Best Time to Buy and Sell Stock (Easy)--------------

TODO sol1 - Brute Force--------------
TIME: TODO
SPACE: TODO

sol2 - Two pointer efficient--------------
public class Solution {
    public int maxProfit(int[] prices) {
        int maxProfit=0;
        if(prices.length==0){
            return maxProfit;
        }
        int bought=prices[0];
        for(int i=1;i<prices.length;i++){
            if(prices[i]>bought){
                if(maxProfit<(prices[i]-bought)){
                    maxProfit=prices[i]-bought;
                }
            }
            else{bought=prices[i];}
        }
        return maxProfit;
    }
}
TIME: TODO
SPACE: TODO

--------------217. Contains Duplicate (Easy)--------------

sol1 - Brute Force - linear search took to long though--------------
class Solution {
    public boolean containsDuplicate(int[] nums) {
        int count = 0;

        for(int i = 0; i < nums.length - 1; i++) {
             for(int j = i + 1; j < nums.length; j++) {
                 if(nums[i] == nums[j]) {
                     return true;
                 }
             }
        }
        return false;
    }
}
TIME: O(n^2)
SPACE: TODO

sol2 - Hashsets--------------
class Solution {
    public  boolean containsDuplicate(int[] nums) {
		 Set<Integer> set = new HashSet<Integer>();
		 for(int i : nums)
			 if(!set.add(i))// if there is same
				 return true;
		 return false;
	 }
}
TIME: O(n)
SPACE: O(n)

TODO sol3 - idk yet


--------------238: Product of Array Except Self (Medium)--------------




______________________________________________________________________
______________________________________________________________________


________________________________BINARY________________________________
______________________________________________________________________
--------------371. Sum of Two Integers (Medium)--------------
TODO

--------------191. Number of 1 Bits (Easy)--------------
sol1 - Brute Force--------------


TIME: TODO
SPACE: TODO



______________________________________________________________________
______________________________________________________________________


________________________________DYNAMIC PROGRAMMING________________________________
___________________________________________________________________________________

--------------70: Climbing Stairs (Easy)--------------
sol1 - Brute Force--------------


TIME: TODO
SPACE: TODO


sol2 - Fastest time commplexity, bad space complexity tho----------------
class Solution {
    public int climbStairs(int n) {
        //base cases
        if(n == 1) return 1;
        if(n == 2) return 2;

        //rest
        int a = 1;
        int b = 2;
        int ways = 0;

        for(int i = 2; i < n; i++) {
            ways = a + b;
            a = b;
            b = ways;
        }
        return ways;
    }
}

TIME: TODO
SPACE: TODO

___________________________________________________________________________________
___________________________________________________________________________________